{
  "errors": [],
  "generated_at": "2025-08-07T22:45:20Z",
  "metrics": {
    "Python/dawgie/__init__.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 886,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/context.py": {
      "CONFIDENCE.HIGH": 5,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 2,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 4,
      "SEVERITY.MEDIUM": 3,
      "SEVERITY.UNDEFINED": 0,
      "loc": 492,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/db/__init__.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 269,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/db/lockview.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 86,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/db/post.py": {
      "CONFIDENCE.HIGH": 6,
      "CONFIDENCE.LOW": 4,
      "CONFIDENCE.MEDIUM": 51,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 6,
      "SEVERITY.MEDIUM": 55,
      "SEVERITY.UNDEFINED": 0,
      "loc": 1765,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/db/shelve/__init__.py": {
      "CONFIDENCE.HIGH": 3,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 3,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 449,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/db/shelve/comms.py": {
      "CONFIDENCE.HIGH": 4,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 1,
      "SEVERITY.LOW": 1,
      "SEVERITY.MEDIUM": 2,
      "SEVERITY.UNDEFINED": 0,
      "loc": 374,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/db/shelve/enums.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 59,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/db/shelve/model.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 320,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/db/shelve/state.py": {
      "CONFIDENCE.HIGH": 3,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 1,
      "SEVERITY.MEDIUM": 2,
      "SEVERITY.UNDEFINED": 0,
      "loc": 121,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/db/shelve/util.py": {
      "CONFIDENCE.HIGH": 2,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 1,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 1,
      "SEVERITY.UNDEFINED": 0,
      "loc": 143,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/db/test.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 69,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/db/testdata.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 170,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/db/tools/__init__.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 30,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/db/tools/dbsinfo.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 122,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/db/tools/extract.py": {
      "CONFIDENCE.HIGH": 1,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 1,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 185,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/db/tools/inter.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 237,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/db/tools/list.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 153,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/db/tools/post2shelve.py": {
      "CONFIDENCE.HIGH": 8,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 1,
      "SEVERITY.LOW": 1,
      "SEVERITY.MEDIUM": 6,
      "SEVERITY.UNDEFINED": 0,
      "loc": 281,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/db/tools/purge.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 86,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/db/tools/sandbox.py": {
      "CONFIDENCE.HIGH": 1,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 1,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 113,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/db/tools/util.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 80,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/db/tools/worm.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 104,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/db/util/__init__.py": {
      "CONFIDENCE.HIGH": 8,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 7,
      "SEVERITY.MEDIUM": 1,
      "SEVERITY.UNDEFINED": 0,
      "loc": 108,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/db/util/wraps.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 70,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/de/__init__.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 46,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/de/html.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 286,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/fe/__init__.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 132,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/fe/__main__.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 59,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/fe/app.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 248,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/fe/basis.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 144,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/fe/submit.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 208,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/fe/svrender.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 76,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/pl/__init__.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 67,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/pl/__main__.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 131,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/pl/dag.py": {
      "CONFIDENCE.HIGH": 1,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 1,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 452,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/pl/farm.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 359,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/pl/jobinfo.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 41,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/pl/logger/__init__.py": {
      "CONFIDENCE.HIGH": 2,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 1,
      "SEVERITY.MEDIUM": 1,
      "SEVERITY.UNDEFINED": 0,
      "loc": 158,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/pl/logger/fe.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 70,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/pl/message.py": {
      "CONFIDENCE.HIGH": 2,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 1,
      "SEVERITY.MEDIUM": 1,
      "SEVERITY.UNDEFINED": 0,
      "loc": 105,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/pl/promotion.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 203,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/pl/resources.py": {
      "CONFIDENCE.HIGH": 2,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 1,
      "SEVERITY.MEDIUM": 1,
      "SEVERITY.UNDEFINED": 0,
      "loc": 135,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/pl/scan.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 78,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/pl/schedule.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 472,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/pl/snapshot.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 182,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/pl/state.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 522,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/pl/util.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 64,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/pl/version.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 75,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/pl/worker/__init__.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 73,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/pl/worker/__main__.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 123,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/pl/worker/aws.py": {
      "CONFIDENCE.HIGH": 2,
      "CONFIDENCE.LOW": 1,
      "CONFIDENCE.MEDIUM": 5,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 6,
      "SEVERITY.MEDIUM": 2,
      "SEVERITY.UNDEFINED": 0,
      "loc": 529,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/pl/worker/cluster.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 119,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/security.py": {
      "CONFIDENCE.HIGH": 1,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 1,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 2,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 455,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/tools/__init__.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 30,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/tools/compliant.py": {
      "CONFIDENCE.HIGH": 2,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 1,
      "SEVERITY.MEDIUM": 1,
      "SEVERITY.UNDEFINED": 0,
      "loc": 798,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/tools/dag.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 87,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/tools/detach.py": {
      "CONFIDENCE.HIGH": 2,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 1,
      "SEVERITY.MEDIUM": 1,
      "SEVERITY.UNDEFINED": 0,
      "loc": 163,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/tools/logfile.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 149,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/tools/resources.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 46,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/tools/submit.py": {
      "CONFIDENCE.HIGH": 2,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 2,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 254,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/tools/trace.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 250,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/types.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 34,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/util/__init__.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 35,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/util/args.py": {
      "CONFIDENCE.HIGH": 1,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 1,
      "SEVERITY.UNDEFINED": 0,
      "loc": 49,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/util/fifo.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 69,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/util/metrics.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 117,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/util/names.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 69,
      "nosec": 0,
      "skipped_tests": 0
    },
    "Python/dawgie/util/refs.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 66,
      "nosec": 0,
      "skipped_tests": 0
    },
    "_totals": {
      "CONFIDENCE.HIGH": 58,
      "CONFIDENCE.LOW": 5,
      "CONFIDENCE.MEDIUM": 59,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 7,
      "SEVERITY.LOW": 37,
      "SEVERITY.MEDIUM": 78,
      "SEVERITY.UNDEFINED": 0,
      "loc": 14600,
      "nosec": 0,
      "skipped_tests": 0
    }
  },
  "results": [
    {
      "code": "46 import os\n47 import pickle\n48 import subprocess\n",
      "col_offset": 0,
      "end_col_offset": 13,
      "filename": "Python/dawgie/context.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 502,
        "link": "https://cwe.mitre.org/data/definitions/502.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with pickle module.",
      "line_number": 47,
      "line_range": [
        47
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/blacklists/blacklist_imports.html#b403-import-pickle",
      "test_id": "B403",
      "test_name": "blacklist"
    },
    {
      "code": "47 import pickle\n48 import subprocess\n49 \n",
      "col_offset": 0,
      "end_col_offset": 17,
      "filename": "Python/dawgie/context.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 78,
        "link": "https://cwe.mitre.org/data/definitions/78.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with the subprocess module.",
      "line_number": 48,
      "line_range": [
        48
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "110 db_rotate_path = os.environ.get('DAWGIE_DB_ROTATE_PATH', '/proj/data/db')\n111 db_copy_path = os.environ.get('DAWGIE_DB_COPY_PATH', '/tmp')\n112 db_port = int(os.environ.get('DAWGIE_DB_PORT', 8080 + PortOffset.shelve.value))\n",
      "col_offset": 53,
      "end_col_offset": 59,
      "filename": "Python/dawgie/context.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 377,
        "link": "https://cwe.mitre.org/data/definitions/377.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Probable insecure usage of temp file/directory.",
      "line_number": 111,
      "line_range": [
        111
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b108_hardcoded_tmp_directory.html",
      "test_id": "B108",
      "test_name": "hardcoded_tmp_directory"
    },
    {
      "code": "122 fe_path = os.environ.get(\n123     'DAWGIE_FE_PATH', '/tmp/' + os.environ.get('USERNAME', 'unknown') + '/fe'\n124 )\n",
      "col_offset": 22,
      "end_col_offset": 29,
      "filename": "Python/dawgie/context.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 377,
        "link": "https://cwe.mitre.org/data/definitions/377.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Probable insecure usage of temp file/directory.",
      "line_number": 123,
      "line_range": [
        123
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b108_hardcoded_tmp_directory.html",
      "test_id": "B108",
      "test_name": "hardcoded_tmp_directory"
    },
    {
      "code": "154         rev = (\n155             subprocess.check_output(['git', 'rev-parse', 'HEAD'])\n156             .decode()\n",
      "col_offset": 12,
      "end_col_offset": 65,
      "filename": "Python/dawgie/context.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 78,
        "link": "https://cwe.mitre.org/data/definitions/78.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Starting a process with a partial executable path",
      "line_number": 155,
      "line_range": [
        155
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b607_start_process_with_partial_path.html",
      "test_id": "B607",
      "test_name": "start_process_with_partial_path"
    },
    {
      "code": "154         rev = (\n155             subprocess.check_output(['git', 'rev-parse', 'HEAD'])\n156             .decode()\n",
      "col_offset": 12,
      "end_col_offset": 65,
      "filename": "Python/dawgie/context.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 78,
        "link": "https://cwe.mitre.org/data/definitions/78.html"
      },
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 155,
      "line_range": [
        155
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "441 def loads(b: bytes) -> None:\n442     attributes = pickle.loads(b)\n443     for a in attributes:\n",
      "col_offset": 17,
      "end_col_offset": 32,
      "filename": "Python/dawgie/context.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 502,
        "link": "https://cwe.mitre.org/data/definitions/502.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue.",
      "line_number": 442,
      "line_range": [
        442
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/blacklists/blacklist_calls.html#b301-pickle",
      "test_id": "B301",
      "test_name": "blacklist"
    },
    {
      "code": "65 import random\n66 import pickle\n67 import psycopg\n",
      "col_offset": 0,
      "end_col_offset": 13,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 502,
        "link": "https://cwe.mitre.org/data/definitions/502.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with pickle module.",
      "line_number": 66,
      "line_range": [
        66
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/blacklists/blacklist_imports.html#b403-import-pickle",
      "test_id": "B403",
      "test_name": "blacklist"
    },
    {
      "code": "124         cur.execute(\n125             'SELECT val_ID,blob_name from Prime WHERE run_ID = %s '\n126             + 'and alg_ID = %s and tn_ID = %s '\n127             + 'and task_ID = %s and sv_ID = %s;',\n",
      "col_offset": 12,
      "end_col_offset": 67,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 125,
      "line_range": [
        125,
        126
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "211             cur.execute(\n212                 'SELECT PK from Algorithm WHERE name = %s and '\n213                 + 'task_ID = %s and '\n214                 + 'design = %s and implementation = %s and bugfix = %s;',\n",
      "col_offset": 16,
      "end_col_offset": 63,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 212,
      "line_range": [
        212,
        213
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "224             cur.execute(\n225                 'SELECT PK FROM StateVector WHERE name = %s and '\n226                 + 'alg_ID = %s and '\n227                 + 'design = %s and implementation = %s and bugfix = %s;',\n",
      "col_offset": 16,
      "end_col_offset": 65,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 225,
      "line_range": [
        225,
        226
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "245                 cur.execute(\n246                     'SELECT run_ID FROM Prime WHERE tn_ID = %s AND '\n247                     + 'task_ID = %s AND alg_ID = %s AND sv_ID = %s;',\n248                     [tn[0], task_ID, alg_ID, sv_ID],\n",
      "col_offset": 20,
      "end_col_offset": 68,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 246,
      "line_range": [
        246,
        247
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "264                 cur.execute(\n265                     'SELECT val_ID from Prime WHERE run_ID = %s AND '\n266                     + 'alg_ID = %s AND tn_ID = %s and task_ID = %s and '\n267                     + 'sv_ID = %s;',\n",
      "col_offset": 20,
      "end_col_offset": 69,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 265,
      "line_range": [
        265,
        266
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "319             cur.execute(\n320                 'SELECT blob_name from Prime WHERE run_ID = %s and '\n321                 + 'tn_ID = %s and task_ID = %s and alg_ID = %s and '\n322                 + 'sv_ID = %s and val_ID = %s;',\n",
      "col_offset": 16,
      "end_col_offset": 68,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 320,
      "line_range": [
        320,
        321
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "390             cur.execute(\n391                 'SELECT pk FROM Algorithm WHERE name = %s AND '\n392                 + 'task_ID = %s;',\n393                 [self._alg().name(), task_ID],\n",
      "col_offset": 16,
      "end_col_offset": 63,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 391,
      "line_range": [
        391,
        392
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "400                 cur.execute(\n401                     'SELECT pk FROM StateVector WHERE name = %s AND '\n402                     + 'alg_ID = ANY(%s);',\n403                     [sv.name(), alg_ID],\n",
      "col_offset": 20,
      "end_col_offset": 69,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 401,
      "line_range": [
        401,
        402
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "406                 cur.execute(\n407                     'SELECT run_ID FROM Prime WHERE tn_ID = %s AND '\n408                     + 'task_ID = %s AND alg_ID = ANY(%s) AND '\n409                     + 'sv_ID = ANY(%s);',\n",
      "col_offset": 20,
      "end_col_offset": 68,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 407,
      "line_range": [
        407,
        408
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "425                 cur.execute(\n426                     'SELECT alg_ID,sv_ID FROM Prime WHERE '\n427                     + 'run_ID = %s AND tn_ID = %s AND task_ID = %s '\n428                     + ' AND alg_ID = ANY(%s) and sv_ID = ANY(%s);',\n",
      "col_offset": 20,
      "end_col_offset": 59,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 426,
      "line_range": [
        426,
        427
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "492             cur.execute(\n493                 'SELECT PK from Algorithm WHERE name = %s and '\n494                 + 'task_ID = %s;',\n495                 (\n",
      "col_offset": 16,
      "end_col_offset": 63,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 493,
      "line_range": [
        493,
        494
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "501             cur.execute(\n502                 'SELECT PK FROM StateVector WHERE name = %s and '\n503                 + 'alg_ID = ANY(%s);',\n504                 (\n",
      "col_offset": 16,
      "end_col_offset": 65,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 502,
      "line_range": [
        502,
        503
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "517             cur.execute(\n518                 'SELECT run_ID FROM Prime WHERE tn_ID = %s AND '\n519                 + 'task_ID = %s AND alg_ID = ANY(%s) AND '\n520                 + 'sv_ID = ANY(%s);',\n",
      "col_offset": 16,
      "end_col_offset": 64,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 518,
      "line_range": [
        518,
        519
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "525                 cur.execute(\n526                     'SELECT PK,alg_ID,sv_ID FROM Prime WHERE '\n527                     + 'run_ID = %s AND  tn_ID = %s AND '\n528                     + 'task_ID = %s AND alg_ID = ANY(%s) AND '\n",
      "col_offset": 20,
      "end_col_offset": 62,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 526,
      "line_range": [
        526,
        527
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "535                 cur.execute(\n536                     'SELECT val_ID from Prime WHERE run_ID = %s AND '\n537                     + 'alg_ID = %s AND tn_ID = %s and task_ID = %s and '\n538                     + 'sv_ID = %s;',\n",
      "col_offset": 20,
      "end_col_offset": 69,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 536,
      "line_range": [
        536,
        537
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "603             cur.execute(\n604                 'SELECT PK from Algorithm WHERE name = %s and '\n605                 + 'task_ID = %s and '\n606                 + 'design = %s and implementation = %s and bugfix = %s;',\n",
      "col_offset": 16,
      "end_col_offset": 63,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 604,
      "line_range": [
        604,
        605
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "616             cur.execute(\n617                 'SELECT run_ID FROM Prime WHERE tn_ID = %s AND '\n618                 + 'task_ID = %s AND alg_ID = %s;',\n619                 [target_ID, task_ID, alg_ID],\n",
      "col_offset": 16,
      "end_col_offset": 64,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 617,
      "line_range": [
        617,
        618
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "622             cur.execute(\n623                 'SELECT sv_ID,val_ID,blob_name FROM Prime WHERE '\n624                 + 'run_ID = %s AND tn_ID = %s AND task_ID = %s AND '\n625                 + 'alg_ID = %s;',\n",
      "col_offset": 16,
      "end_col_offset": 65,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 623,
      "line_range": [
        623,
        624
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "629                 cur.execute(\n630                     'SELECT EXISTS (SELECT 1 FROM Prime WHERE '\n631                     + 'run_ID = %s AND tn_ID = %s AND task_ID = %s '\n632                     + 'AND alg_ID = %s AND sv_ID = %s AND val_ID = %s '\n",
      "col_offset": 20,
      "end_col_offset": 63,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 630,
      "line_range": [
        630,
        631
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "643                     cur.execute(\n644                         'INSERT INTO Prime '\n645                         + '(run_ID, tn_ID, task_ID, alg_ID, sv_ID, '\n646                         + 'val_ID, blob_name) values '\n",
      "col_offset": 24,
      "end_col_offset": 44,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 644,
      "line_range": [
        644,
        645
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "674                 cur.execute(\n675                     'SELECT EXISTS (SELECT * from Prime where '\n676                     + 'blob_name = %s);',\n677                     [result],\n",
      "col_offset": 20,
      "end_col_offset": 63,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 675,
      "line_range": [
        675,
        676
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "711                 cur.execute(\n712                     'SELECT * from Algorithm WHERE name = %s and '\n713                     + 'task_ID = %s and '\n714                     + 'design = %s and bugfix = %s and implementation = %s;',\n",
      "col_offset": 20,
      "end_col_offset": 66,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 712,
      "line_range": [
        712,
        713
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "728                 cur.execute(\n729                     'SELECT * from StateVector WHERE name = %s and '\n730                     + 'alg_ID = %s and '\n731                     + 'design = %s and bugfix = %s and implementation = %s;',\n",
      "col_offset": 20,
      "end_col_offset": 68,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 729,
      "line_range": [
        729,
        730
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "755                 args = (\n756                     'SELECT * from value where name = %s and '\n757                     + 'sv_ID = %s and '\n758                     + 'design = %s and bugfix = %s and implementation = %s;',\n",
      "col_offset": 20,
      "end_col_offset": 62,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 756,
      "line_range": [
        756,
        757
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "824                 conn.rollback()\n825                 time.sleep(random.uniform(0.250, 0.750))\n826             except psycopg.errors.UniqueViolation:\n",
      "col_offset": 27,
      "end_col_offset": 55,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 330,
        "link": "https://cwe.mitre.org/data/definitions/330.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Standard pseudo-random generators are not suitable for security/cryptographic purposes.",
      "line_number": 825,
      "line_range": [
        825
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/blacklists/blacklist_calls.html#b311-random",
      "test_id": "B311",
      "test_name": "blacklist"
    },
    {
      "code": "828                 conn.rollback()\n829                 time.sleep(random.uniform(0.250, 0.750))\n830             except psycopg.IntegrityError:\n",
      "col_offset": 27,
      "end_col_offset": 55,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 330,
        "link": "https://cwe.mitre.org/data/definitions/330.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Standard pseudo-random generators are not suitable for security/cryptographic purposes.",
      "line_number": 829,
      "line_range": [
        829
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/blacklists/blacklist_calls.html#b311-random",
      "test_id": "B311",
      "test_name": "blacklist"
    },
    {
      "code": "860             cur.execute(\n861                 'SELECT * from Algorithm WHERE name = %s and '\n862                 + 'task_ID = %s and '\n863                 + 'design = %s and bugfix = %s and implementation = %s;',\n",
      "col_offset": 16,
      "end_col_offset": 62,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 861,
      "line_range": [
        861,
        862
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "877             args = (\n878                 'SELECT * from StateVector WHERE name = %s and '\n879                 + 'alg_ID = %s and '\n880                 + 'design = %s and bugfix = %s and implementation = %s;',\n",
      "col_offset": 16,
      "end_col_offset": 64,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 878,
      "line_range": [
        878,
        879
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "893                 _insert(\n894                     'INSERT into StateVector '\n895                     + '(name, alg_ID, design, bugfix, '\n896                     + 'implementation) values (%s, %s, %s, %s, %s);',\n",
      "col_offset": 20,
      "end_col_offset": 46,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 894,
      "line_range": [
        894,
        895
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "920             args = (\n921                 'SELECT * from Value where name = %s and '\n922                 + 'sv_ID = %s and '\n923                 + 'design = %s and bugfix = %s and implementation = %s;',\n",
      "col_offset": 16,
      "end_col_offset": 58,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 921,
      "line_range": [
        921,
        922
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "988                 conn.rollback()\n989                 time.sleep(random.uniform(0.250, 0.750))\n990             except psycopg.errors.UniqueViolation:\n",
      "col_offset": 27,
      "end_col_offset": 55,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 330,
        "link": "https://cwe.mitre.org/data/definitions/330.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Standard pseudo-random generators are not suitable for security/cryptographic purposes.",
      "line_number": 989,
      "line_range": [
        989
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/blacklists/blacklist_calls.html#b311-random",
      "test_id": "B311",
      "test_name": "blacklist"
    },
    {
      "code": "992                 conn.rollback()\n993                 time.sleep(random.uniform(0.250, 0.750))\n994             except psycopg.IntegrityError:\n",
      "col_offset": 27,
      "end_col_offset": 55,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 330,
        "link": "https://cwe.mitre.org/data/definitions/330.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Standard pseudo-random generators are not suitable for security/cryptographic purposes.",
      "line_number": 993,
      "line_range": [
        993
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/blacklists/blacklist_calls.html#b311-random",
      "test_id": "B311",
      "test_name": "blacklist"
    },
    {
      "code": "1081             conn.rollback()\n1082             time.sleep(random.uniform(0.250, 0.750))\n1083         except psycopg.errors.UniqueViolation:\n",
      "col_offset": 23,
      "end_col_offset": 51,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 330,
        "link": "https://cwe.mitre.org/data/definitions/330.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Standard pseudo-random generators are not suitable for security/cryptographic purposes.",
      "line_number": 1082,
      "line_range": [
        1082
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/blacklists/blacklist_calls.html#b311-random",
      "test_id": "B311",
      "test_name": "blacklist"
    },
    {
      "code": "1237         cur.execute(\n1238             'SELECT pk FROM Algorithm WHERE name = %s AND '\n1239             + 'task_ID = %s AND design = %s AND implementation = %s '\n1240             + 'AND bugfix = %s;',\n",
      "col_offset": 12,
      "end_col_offset": 59,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 1238,
      "line_range": [
        1238,
        1239
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "1253         cur.execute(\n1254             'SELECT pk FROM StateVector WHERE name = %s AND '\n1255             + 'alg_ID = %s AND design = %s AND implementation = %s '\n1256             + 'AND bugfix = %s;',\n",
      "col_offset": 12,
      "end_col_offset": 61,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 1254,
      "line_range": [
        1254,
        1255
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "1269         cur.execute(\n1270             'SELECT pk FROM Value WHERE name = %s AND '\n1271             + 'sv_ID = %s AND design = %s AND implementation = %s '\n1272             + 'AND bugfix = %s;',\n",
      "col_offset": 12,
      "end_col_offset": 55,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 1270,
      "line_range": [
        1270,
        1271
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "1285         cur.execute(\n1286             'SELECT run_ID FROM Prime WHERE tn_ID = %s AND '\n1287             + 'task_ID = %s AND alg_ID = %s AND sv_ID = %s AND '\n1288             + 'val_ID = %s;',\n",
      "col_offset": 12,
      "end_col_offset": 60,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 1286,
      "line_range": [
        1286,
        1287
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "1316         cur.execute(\n1317             'SELECT pk FROM Algorithm WHERE name = %s AND ' + 'task_ID = %s;',\n1318             (inp.aid.name, task_ID),\n",
      "col_offset": 12,
      "end_col_offset": 59,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 1317,
      "line_range": [
        1317
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "1321         cur.execute(\n1322             'SELECT pk FROM StateVector WHERE name = %s AND '\n1323             + 'alg_ID = ANY(%s);',\n1324             [inp.sid.name, alg_IDs],\n",
      "col_offset": 12,
      "end_col_offset": 61,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 1322,
      "line_range": [
        1322,
        1323
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "1332         cur.execute(\n1333             'SELECT run_ID,blob_name FROM Prime WHERE tn_ID = %s AND '\n1334             + 'task_ID = %s AND alg_ID = ANY(%s) AND '\n1335             + 'sv_ID = ANY(%s) AND val_ID = ANY(%s);',\n",
      "col_offset": 12,
      "end_col_offset": 70,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 1333,
      "line_range": [
        1333,
        1334
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "1402         cur.execute(\n1403             'SELECT pk FROM Algorithm WHERE name = %s AND '\n1404             + 'task_ID = %s AND design = %s AND implementation = %s '\n1405             + 'AND bugfix = %s;',\n",
      "col_offset": 12,
      "end_col_offset": 59,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 1403,
      "line_range": [
        1403,
        1404
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "1418         cur.execute(\n1419             'SELECT pk FROM StateVector WHERE name = %s AND '\n1420             + 'alg_ID = %s AND design = %s AND implementation = %s '\n1421             + 'AND bugfix = %s;',\n",
      "col_offset": 12,
      "end_col_offset": 61,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 1419,
      "line_range": [
        1419,
        1420
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "1434         cur.execute(\n1435             'SELECT pk FROM Value WHERE name = %s AND '\n1436             + 'sv_ID = %s AND design = %s AND implementation = %s '\n1437             + 'AND bugfix = %s;',\n",
      "col_offset": 12,
      "end_col_offset": 55,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 1435,
      "line_range": [
        1435,
        1436
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "1450         cur.execute(\n1451             'SELECT blob_name FROM Prime WHERE run_id = %s AND '\n1452             + 'tn_ID = %s AND task_ID = %s AND alg_ID = %s AND '\n1453             + 'sv_ID = %s AND val_ID = %s;',\n",
      "col_offset": 12,
      "end_col_offset": 64,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 1451,
      "line_range": [
        1451,
        1452
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "1593             \"SELECT pg_catalog.setval(pg_get_serial_sequence(\"\n1594             + \"'Prime', 'pk'), (SELECT MAX(PK) FROM Prime));\"\n1595         )\n1596         cur.execute(\n",
      "col_offset": 14,
      "end_col_offset": 61,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 1594,
      "line_range": [
        1593,
        1594
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "1597             \"SELECT pg_catalog.setval(pg_get_serial_sequence(\"\n1598             + \"'Target', 'pk'), (SELECT MAX(PK) FROM Target));\"\n1599         )\n1600         cur.execute(\n",
      "col_offset": 14,
      "end_col_offset": 63,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 1598,
      "line_range": [
        1597,
        1598
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "1601             \"SELECT pg_catalog.setval(pg_get_serial_sequence(\"\n1602             + \"'Algorithm', 'pk'), (SELECT MAX(PK) FROM Algorithm));\"\n1603         )\n1604         cur.execute(\n",
      "col_offset": 14,
      "end_col_offset": 69,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 1602,
      "line_range": [
        1601,
        1602
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "1605             \"SELECT pg_catalog.setval(pg_get_serial_sequence\"\n1606             + \"('StateVector', 'pk'), (SELECT MAX(PK) FROM \"\n1607             + \"StateVector));\"\n1608         )\n",
      "col_offset": 14,
      "end_col_offset": 60,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 1606,
      "line_range": [
        1605,
        1606
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "1610             \"SELECT pg_catalog.setval(pg_get_serial_sequence(\"\n1611             + \"'Value', 'pk'), (SELECT MAX(PK) FROM Value));\"\n1612         )\n1613         cur.execute(\n",
      "col_offset": 14,
      "end_col_offset": 61,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 1611,
      "line_range": [
        1610,
        1611
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "1614             \"SELECT pg_catalog.setval(pg_get_serial_sequence(\"\n1615             + \"'Task', 'pk'), (SELECT MAX(PK) FROM Task));\"\n1616         )\n1617     except psycopg.ProgrammingError:\n",
      "col_offset": 14,
      "end_col_offset": 59,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 1615,
      "line_range": [
        1614,
        1615
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "1642         cur.execute(\n1643             'SELECT blob_name FROM Prime WHERE run_ID = %s AND '\n1644             + 'tn_ID = %s AND task_ID = %s AND alg_ID = %s AND '\n1645             + 'sv_ID = %s AND val_ID = %s;',\n",
      "col_offset": 12,
      "end_col_offset": 64,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 1643,
      "line_range": [
        1643,
        1644
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "1703     cur.execute(\n1704         'SELECT pk FROM StateVector WHERE name = %s AND ' + 'alg_ID = ANY(%s);',\n1705         [svn, alg_ID],\n",
      "col_offset": 8,
      "end_col_offset": 57,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 1704,
      "line_range": [
        1704
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "1708     cur.execute(\n1709         'SELECT pk FROM Value WHERE name = %s AND ' + 'sv_ID = ANY(%s);',\n1710         [vn, sv_ID],\n",
      "col_offset": 8,
      "end_col_offset": 51,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 1709,
      "line_range": [
        1709
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "1714     cur.execute(\n1715         'DELETE FROM Prime WHERE run_ID = %s AND tn_ID = %s AND '\n1716         + 'task_ID = %s AND alg_ID = ANY(%s) AND sv_ID = ANY(%s) AND '\n1717         + 'val_ID = ANY(%s);',\n",
      "col_offset": 8,
      "end_col_offset": 65,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 1715,
      "line_range": [
        1715,
        1716
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "1755         cur.execute(\n1756             'SELECT pk FROM StateVector WHERE name = %s AND '\n1757             + 'alg_ID = ANY(%s);',\n1758             [sv.name(), alg_ID],\n",
      "col_offset": 12,
      "end_col_offset": 61,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 1756,
      "line_range": [
        1756,
        1757
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "1761         cur.execute(\n1762             'SELECT alg_ID, sv_ID FROM Prime WHERE run_ID = %s AND '\n1763             + ' tn_ID = %s AND task_ID = %s AND alg_ID = ANY(%s) AND '\n1764             + 'sv_ID = ANY(%s);',\n",
      "col_offset": 12,
      "end_col_offset": 68,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 1762,
      "line_range": [
        1762,
        1763
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "1865             cur.execute(\n1866                 'SELECT PK FROM Algorithm WHERE task_ID = %s AND '\n1867                 + 'name = %s AND design = %s AND implementation = %s '\n1868                 + 'AND bugfix = %s;',\n",
      "col_offset": 16,
      "end_col_offset": 66,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 1866,
      "line_range": [
        1866,
        1867
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "1872             cur.execute(\n1873                 'SELECT run_ID FROM Prime WHERE '\n1874                 + 'tn_ID = ANY(%s) AND task_ID = %s AND alg_ID = %s;',\n1875                 [tnids, tid, aid],\n",
      "col_offset": 16,
      "end_col_offset": 49,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 1873,
      "line_range": [
        1873,
        1874
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "1919         cur.execute(\n1920             'SELECT pk from Algorithm WHERE name = %s and task_ID = %s'\n1921             + ' and design = %s and implementation = %s and bugfix = %s;',\n1922             (\n",
      "col_offset": 12,
      "end_col_offset": 71,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 1920,
      "line_range": [
        1920,
        1921
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "1943         cur.execute(\n1944             'SELECT pk from StateVector WHERE name = %s and alg_ID = %s '\n1945             + 'and design = %s and implementation = %s and bugfix = %s;',\n1946             (sv.name(), alg_ID, sv.design(), sv.implementation(), sv.bugfix()),\n",
      "col_offset": 12,
      "end_col_offset": 73,
      "filename": "Python/dawgie/db/post.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 1944,
      "line_range": [
        1944,
        1945
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "193     elif method == Method.rsync:\n194         status = os.system(f\"rsync --delete -ax {gateway}:{ret_value}/ {dst}/\")\n195     elif method == Method.scp:\n",
      "col_offset": 17,
      "end_col_offset": 79,
      "filename": "Python/dawgie/db/shelve/__init__.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 78,
        "link": "https://cwe.mitre.org/data/definitions/78.html"
      },
      "issue_severity": "HIGH",
      "issue_text": "Starting a process with a shell, possible injection detected, security issue.",
      "line_number": 194,
      "line_range": [
        194
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b605_start_process_with_a_shell.html",
      "test_id": "B605",
      "test_name": "start_process_with_a_shell"
    },
    {
      "code": "195     elif method == Method.scp:\n196         status = os.system(f\"scp -rp {gateway}:{ret_value}/* {dst}/\")\n197     elif method == Method.cp:\n",
      "col_offset": 17,
      "end_col_offset": 69,
      "filename": "Python/dawgie/db/shelve/__init__.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 78,
        "link": "https://cwe.mitre.org/data/definitions/78.html"
      },
      "issue_severity": "HIGH",
      "issue_text": "Starting a process with a shell, possible injection detected, security issue.",
      "line_number": 196,
      "line_range": [
        196
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b605_start_process_with_a_shell.html",
      "test_id": "B605",
      "test_name": "start_process_with_a_shell"
    },
    {
      "code": "197     elif method == Method.cp:\n198         status = os.system(f\"cp -rp {ret_value}/* {dst}/\")\n199 \n",
      "col_offset": 17,
      "end_col_offset": 58,
      "filename": "Python/dawgie/db/shelve/__init__.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 78,
        "link": "https://cwe.mitre.org/data/definitions/78.html"
      },
      "issue_severity": "HIGH",
      "issue_text": "Starting a process with a shell, possible injection detected, security issue.",
      "line_number": 198,
      "line_range": [
        198
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b605_start_process_with_a_shell.html",
      "test_id": "B605",
      "test_name": "start_process_with_a_shell"
    },
    {
      "code": "47 import os\n48 import pickle\n49 import struct\n",
      "col_offset": 0,
      "end_col_offset": 13,
      "filename": "Python/dawgie/db/shelve/comms.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 502,
        "link": "https://cwe.mitre.org/data/definitions/502.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with pickle module.",
      "line_number": 48,
      "line_range": [
        48
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/blacklists/blacklist_imports.html#b403-import-pickle",
      "test_id": "B403",
      "test_name": "blacklist"
    },
    {
      "code": "89         s.close()\n90         return pickle.loads(buf)\n91 \n",
      "col_offset": 15,
      "end_col_offset": 32,
      "filename": "Python/dawgie/db/shelve/comms.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 502,
        "link": "https://cwe.mitre.org/data/definitions/502.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue.",
      "line_number": 90,
      "line_range": [
        90
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/blacklists/blacklist_calls.html#b301-pickle",
      "test_id": "B301",
      "test_name": "blacklist"
    },
    {
      "code": "215             else:\n216                 request = pickle.loads(self.__buf['data'][:length])\n217                 self.__buf['data'] = self.__buf['data'][length:]\n",
      "col_offset": 26,
      "end_col_offset": 67,
      "filename": "Python/dawgie/db/shelve/comms.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 502,
        "link": "https://cwe.mitre.org/data/definitions/502.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue.",
      "line_number": 216,
      "line_range": [
        216
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/blacklists/blacklist_calls.html#b301-pickle",
      "test_id": "B301",
      "test_name": "blacklist"
    },
    {
      "code": "360                 else:\n361                     r = os.system(f\"rsync --delete -ax {src}/ {tmpdst}/\")\n362                     ret_value = tmpdst if r == 0 else None\n",
      "col_offset": 24,
      "end_col_offset": 73,
      "filename": "Python/dawgie/db/shelve/comms.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 78,
        "link": "https://cwe.mitre.org/data/definitions/78.html"
      },
      "issue_severity": "HIGH",
      "issue_text": "Starting a process with a shell, possible injection detected, security issue.",
      "line_number": 361,
      "line_range": [
        361
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b605_start_process_with_a_shell.html",
      "test_id": "B605",
      "test_name": "start_process_with_a_shell"
    },
    {
      "code": "44 import os\n45 import shelve\n46 \n",
      "col_offset": 0,
      "end_col_offset": 13,
      "filename": "Python/dawgie/db/shelve/state.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 502,
        "link": "https://cwe.mitre.org/data/definitions/502.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with shelve module.",
      "line_number": 45,
      "line_range": [
        45
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/blacklists/blacklist_imports.html#b403-import-pickle",
      "test_id": "B403",
      "test_name": "blacklist"
    },
    {
      "code": "97             for name in self.__names:\n98                 db[name] = shelve.open('.'.join([path, name]), 'c')\n99                 idx[name] = util.indexed(db[name])\n",
      "col_offset": 27,
      "end_col_offset": 67,
      "filename": "Python/dawgie/db/shelve/state.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 502,
        "link": "https://cwe.mitre.org/data/definitions/502.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue.",
      "line_number": 98,
      "line_range": [
        98
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/blacklists/blacklist_calls.html#b301-pickle",
      "test_id": "B301",
      "test_name": "blacklist"
    },
    {
      "code": "115         for name, table in db.items():\n116             dbt = shelve.open('.'.join([path, name]), 'c')\n117             dbt.update(table)\n",
      "col_offset": 18,
      "end_col_offset": 58,
      "filename": "Python/dawgie/db/shelve/state.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 502,
        "link": "https://cwe.mitre.org/data/definitions/502.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue.",
      "line_number": 116,
      "line_range": [
        116
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/blacklists/blacklist_calls.html#b301-pickle",
      "test_id": "B301",
      "test_name": "blacklist"
    },
    {
      "code": "118     )\n119     os.system(f'mkdir {tstring}')\n120     return tstring\n",
      "col_offset": 4,
      "end_col_offset": 33,
      "filename": "Python/dawgie/db/shelve/util.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 78,
        "link": "https://cwe.mitre.org/data/definitions/78.html"
      },
      "issue_severity": "HIGH",
      "issue_text": "Starting a process with a shell, possible injection detected, security issue.",
      "line_number": 119,
      "line_range": [
        119
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b605_start_process_with_a_shell.html",
      "test_id": "B605",
      "test_name": "start_process_with_a_shell"
    },
    {
      "code": "124     # because shelve key must be a string, pylint: disable=eval-used\n125     return [eval(k) for k in prime_table]\n126 \n",
      "col_offset": 12,
      "end_col_offset": 19,
      "filename": "Python/dawgie/db/shelve/util.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 78,
        "link": "https://cwe.mitre.org/data/definitions/78.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Use of possibly insecure function - consider using safer ast.literal_eval.",
      "line_number": 125,
      "line_range": [
        125
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/blacklists/blacklist_calls.html#b307-eval",
      "test_id": "B307",
      "test_name": "blacklist"
    },
    {
      "code": "43 import os\n44 import pickle\n45 import sys\n",
      "col_offset": 0,
      "end_col_offset": 13,
      "filename": "Python/dawgie/db/tools/extract.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 502,
        "link": "https://cwe.mitre.org/data/definitions/502.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with pickle module.",
      "line_number": 44,
      "line_range": [
        44
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/blacklists/blacklist_imports.html#b403-import-pickle",
      "test_id": "B403",
      "test_name": "blacklist"
    },
    {
      "code": "43 import os\n44 import shelve\n45 import sys\n",
      "col_offset": 0,
      "end_col_offset": 13,
      "filename": "Python/dawgie/db/tools/post2shelve.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 502,
        "link": "https://cwe.mitre.org/data/definitions/502.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with shelve module.",
      "line_number": 44,
      "line_range": [
        44
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/blacklists/blacklist_imports.html#b403-import-pickle",
      "test_id": "B403",
      "test_name": "blacklist"
    },
    {
      "code": "88     index = []\n89     table = shelve.open(fn)\n90     tdb = {}\n",
      "col_offset": 12,
      "end_col_offset": 27,
      "filename": "Python/dawgie/db/tools/post2shelve.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 502,
        "link": "https://cwe.mitre.org/data/definitions/502.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue.",
      "line_number": 89,
      "line_range": [
        89
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/blacklists/blacklist_calls.html#b301-pickle",
      "test_id": "B301",
      "test_name": "blacklist"
    },
    {
      "code": "134     cur.close()\n135     with shelve.open(fn) as db:\n136         db.update(table)\n",
      "col_offset": 9,
      "end_col_offset": 24,
      "filename": "Python/dawgie/db/tools/post2shelve.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 502,
        "link": "https://cwe.mitre.org/data/definitions/502.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue.",
      "line_number": 135,
      "line_range": [
        135
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/blacklists/blacklist_calls.html#b301-pickle",
      "test_id": "B301",
      "test_name": "blacklist"
    },
    {
      "code": "147     index = []\n148     table = shelve.open(fn)\n149     tdb = {}\n",
      "col_offset": 12,
      "end_col_offset": 27,
      "filename": "Python/dawgie/db/tools/post2shelve.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 502,
        "link": "https://cwe.mitre.org/data/definitions/502.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue.",
      "line_number": 148,
      "line_range": [
        148
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/blacklists/blacklist_calls.html#b301-pickle",
      "test_id": "B301",
      "test_name": "blacklist"
    },
    {
      "code": "168     index = []\n169     table = shelve.open(fn)\n170     tdb = {}\n",
      "col_offset": 12,
      "end_col_offset": 27,
      "filename": "Python/dawgie/db/tools/post2shelve.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 502,
        "link": "https://cwe.mitre.org/data/definitions/502.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue.",
      "line_number": 169,
      "line_range": [
        169
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/blacklists/blacklist_calls.html#b301-pickle",
      "test_id": "B301",
      "test_name": "blacklist"
    },
    {
      "code": "186     index = []\n187     table = shelve.open(fn)\n188     tdb = {}\n",
      "col_offset": 12,
      "end_col_offset": 27,
      "filename": "Python/dawgie/db/tools/post2shelve.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 502,
        "link": "https://cwe.mitre.org/data/definitions/502.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue.",
      "line_number": 187,
      "line_range": [
        187
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/blacklists/blacklist_calls.html#b301-pickle",
      "test_id": "B301",
      "test_name": "blacklist"
    },
    {
      "code": "204     index = []\n205     table = shelve.open(fn)\n206     tdb = {}\n",
      "col_offset": 12,
      "end_col_offset": 27,
      "filename": "Python/dawgie/db/tools/post2shelve.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 502,
        "link": "https://cwe.mitre.org/data/definitions/502.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue.",
      "line_number": 205,
      "line_range": [
        205
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/blacklists/blacklist_calls.html#b301-pickle",
      "test_id": "B301",
      "test_name": "blacklist"
    },
    {
      "code": "223     basefn = f'{dpath}/{dawgie.context.db_post2shelve_prefix}'\n224     os.system(f\"mkdir -p {dpath}\")\n225     for suffix in ['alg', 'prime', 'state', 'target', 'task', 'value']:\n",
      "col_offset": 4,
      "end_col_offset": 34,
      "filename": "Python/dawgie/db/tools/post2shelve.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 78,
        "link": "https://cwe.mitre.org/data/definitions/78.html"
      },
      "issue_severity": "HIGH",
      "issue_text": "Starting a process with a shell, possible injection detected, security issue.",
      "line_number": 224,
      "line_range": [
        224
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b605_start_process_with_a_shell.html",
      "test_id": "B605",
      "test_name": "start_process_with_a_shell"
    },
    {
      "code": "53 def make_dir(dst):\n54     return os.system(f\"mkdir -p {dst}\")\n55 \n",
      "col_offset": 11,
      "end_col_offset": 39,
      "filename": "Python/dawgie/db/tools/sandbox.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 78,
        "link": "https://cwe.mitre.org/data/definitions/78.html"
      },
      "issue_severity": "HIGH",
      "issue_text": "Starting a process with a shell, possible injection detected, security issue.",
      "line_number": 54,
      "line_range": [
        54
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b605_start_process_with_a_shell.html",
      "test_id": "B605",
      "test_name": "start_process_with_a_shell"
    },
    {
      "code": "41 import os\n42 import pickle\n43 import shutil\n",
      "col_offset": 0,
      "end_col_offset": 13,
      "filename": "Python/dawgie/db/util/__init__.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 502,
        "link": "https://cwe.mitre.org/data/definitions/502.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with pickle module.",
      "line_number": 42,
      "line_range": [
        42
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/blacklists/blacklist_imports.html#b403-import-pickle",
      "test_id": "B403",
      "test_name": "blacklist"
    },
    {
      "code": "43 import shutil\n44 import subprocess\n45 import tempfile\n",
      "col_offset": 0,
      "end_col_offset": 17,
      "filename": "Python/dawgie/db/util/__init__.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 78,
        "link": "https://cwe.mitre.org/data/definitions/78.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with the subprocess module.",
      "line_number": 44,
      "line_range": [
        44
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "60     with open(os.path.join(dawgie.context.data_dbs, entry), 'rb') as f:\n61         result = pickle.load(f)\n62         pass\n",
      "col_offset": 17,
      "end_col_offset": 31,
      "filename": "Python/dawgie/db/util/__init__.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 502,
        "link": "https://cwe.mitre.org/data/definitions/502.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue.",
      "line_number": 61,
      "line_range": [
        61
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/blacklists/blacklist_calls.html#b301-pickle",
      "test_id": "B301",
      "test_name": "blacklist"
    },
    {
      "code": "73     os.chmod(fn, int('0664', 8))  # -rw-rw-r--\n74     m = _extract(subprocess.check_output(['md5sum', '-b', fn]))\n75     s = _extract(subprocess.check_output(['sha1sum', '-b', fn]))\n",
      "col_offset": 17,
      "end_col_offset": 62,
      "filename": "Python/dawgie/db/util/__init__.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 78,
        "link": "https://cwe.mitre.org/data/definitions/78.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Starting a process with a partial executable path",
      "line_number": 74,
      "line_range": [
        74
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b607_start_process_with_partial_path.html",
      "test_id": "B607",
      "test_name": "start_process_with_partial_path"
    },
    {
      "code": "73     os.chmod(fn, int('0664', 8))  # -rw-rw-r--\n74     m = _extract(subprocess.check_output(['md5sum', '-b', fn]))\n75     s = _extract(subprocess.check_output(['sha1sum', '-b', fn]))\n",
      "col_offset": 17,
      "end_col_offset": 62,
      "filename": "Python/dawgie/db/util/__init__.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 78,
        "link": "https://cwe.mitre.org/data/definitions/78.html"
      },
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 74,
      "line_range": [
        74
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "74     m = _extract(subprocess.check_output(['md5sum', '-b', fn]))\n75     s = _extract(subprocess.check_output(['sha1sum', '-b', fn]))\n76     result = '_'.join([m, s])\n",
      "col_offset": 17,
      "end_col_offset": 63,
      "filename": "Python/dawgie/db/util/__init__.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 78,
        "link": "https://cwe.mitre.org/data/definitions/78.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Starting a process with a partial executable path",
      "line_number": 75,
      "line_range": [
        75
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b607_start_process_with_partial_path.html",
      "test_id": "B607",
      "test_name": "start_process_with_partial_path"
    },
    {
      "code": "74     m = _extract(subprocess.check_output(['md5sum', '-b', fn]))\n75     s = _extract(subprocess.check_output(['sha1sum', '-b', fn]))\n76     result = '_'.join([m, s])\n",
      "col_offset": 17,
      "end_col_offset": 63,
      "filename": "Python/dawgie/db/util/__init__.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 78,
        "link": "https://cwe.mitre.org/data/definitions/78.html"
      },
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 75,
      "line_range": [
        75
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "131         result[3] = isinstance(value.implementation(), int)\n132     except:  # noqa: E722\n133         pass\n134     return all(result)\n",
      "col_offset": 4,
      "end_col_offset": 12,
      "filename": "Python/dawgie/db/util/__init__.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 703,
        "link": "https://cwe.mitre.org/data/definitions/703.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Try, Except, Pass detected.",
      "line_number": 132,
      "line_range": [
        132,
        133
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b110_try_except_pass.html",
      "test_id": "B110",
      "test_name": "try_except_pass"
    },
    {
      "code": "48 import pydot\n49 import xml.etree.ElementTree\n50 \n",
      "col_offset": 0,
      "end_col_offset": 28,
      "filename": "Python/dawgie/pl/dag.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 20,
        "link": "https://cwe.mitre.org/data/definitions/20.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Using xml.etree.ElementTree to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.etree.ElementTree with the equivalent defusedxml package, or make sure defusedxml.defuse_stdlib() is called.",
      "line_number": 49,
      "line_range": [
        49
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/blacklists/blacklist_imports.html#b405-import-xml-etree",
      "test_id": "B405",
      "test_name": "blacklist"
    },
    {
      "code": "42 import os\n43 import pickle\n44 import struct\n",
      "col_offset": 0,
      "end_col_offset": 13,
      "filename": "Python/dawgie/pl/logger/__init__.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 502,
        "link": "https://cwe.mitre.org/data/definitions/502.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with pickle module.",
      "line_number": 43,
      "line_range": [
        43
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/blacklists/blacklist_imports.html#b403-import-pickle",
      "test_id": "B403",
      "test_name": "blacklist"
    },
    {
      "code": "87             else:\n88                 record = pickle.loads(self.__buf[:length])\n89                 self.__actual.handle(logging.makeLogRecord(record))\n",
      "col_offset": 25,
      "end_col_offset": 58,
      "filename": "Python/dawgie/pl/logger/__init__.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 502,
        "link": "https://cwe.mitre.org/data/definitions/502.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue.",
      "line_number": 88,
      "line_range": [
        88
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/blacklists/blacklist_calls.html#b301-pickle",
      "test_id": "B301",
      "test_name": "blacklist"
    },
    {
      "code": "40 import enum\n41 import pickle\n42 import socket\n",
      "col_offset": 0,
      "end_col_offset": 13,
      "filename": "Python/dawgie/pl/message.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 502,
        "link": "https://cwe.mitre.org/data/definitions/502.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with pickle module.",
      "line_number": 41,
      "line_range": [
        41
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/blacklists/blacklist_imports.html#b403-import-pickle",
      "test_id": "B403",
      "test_name": "blacklist"
    },
    {
      "code": "111 def loads(b: bytes) -> MSG:\n112     return pickle.loads(b)\n113 \n",
      "col_offset": 11,
      "end_col_offset": 26,
      "filename": "Python/dawgie/pl/message.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 502,
        "link": "https://cwe.mitre.org/data/definitions/502.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue.",
      "line_number": 112,
      "line_range": [
        112
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/blacklists/blacklist_calls.html#b301-pickle",
      "test_id": "B301",
      "test_name": "blacklist"
    },
    {
      "code": "45 import os\n46 import pickle\n47 \n",
      "col_offset": 0,
      "end_col_offset": 13,
      "filename": "Python/dawgie/pl/resources.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 502,
        "link": "https://cwe.mitre.org/data/definitions/502.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with pickle module.",
      "line_number": 46,
      "line_range": [
        46
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/blacklists/blacklist_imports.html#b403-import-pickle",
      "test_id": "B403",
      "test_name": "blacklist"
    },
    {
      "code": "57         with open(fn, 'br') as file:\n58             past = pickle.load(file)\n59         # make sure loaded context is an expected structure\n",
      "col_offset": 19,
      "end_col_offset": 36,
      "filename": "Python/dawgie/pl/resources.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 502,
        "link": "https://cwe.mitre.org/data/definitions/502.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue.",
      "line_number": 58,
      "line_range": [
        58
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/blacklists/blacklist_calls.html#b301-pickle",
      "test_id": "B301",
      "test_name": "blacklist"
    },
    {
      "code": "54 import os\n55 import pickle\n56 import requests\n",
      "col_offset": 0,
      "end_col_offset": 13,
      "filename": "Python/dawgie/pl/worker/aws.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 502,
        "link": "https://cwe.mitre.org/data/definitions/502.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with pickle module.",
      "line_number": 55,
      "line_range": [
        55
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/blacklists/blacklist_imports.html#b403-import-pickle",
      "test_id": "B403",
      "test_name": "blacklist"
    },
    {
      "code": "197         }\n198         signed = self._pgp.sign(\n199             base64.b64encode(pickle.dumps(message)),\n200             keyid=self._kid,\n201             passphrase='1234567890',\n202         )\n203         response = _https_push(signed.data)  # pylint: disable=no-member\n",
      "col_offset": 17,
      "end_col_offset": 9,
      "filename": "Python/dawgie/pl/worker/aws.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 259,
        "link": "https://cwe.mitre.org/data/definitions/259.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Possible hardcoded password: '1234567890'",
      "line_number": 198,
      "line_range": [
        198,
        199,
        200,
        201,
        202
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b106_hardcoded_password_funcarg.html",
      "test_id": "B106",
      "test_name": "hardcoded_password_funcarg"
    },
    {
      "code": "224         }\n225         signed = self._pgp.sign(\n226             base64.b64encode(pickle.dumps(message)),\n227             keyid=self._kid,\n228             passphrase='1234567890',\n229         )\n230         response = _https_push(signed.data)  # pylint: disable=no-member\n",
      "col_offset": 17,
      "end_col_offset": 9,
      "filename": "Python/dawgie/pl/worker/aws.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 259,
        "link": "https://cwe.mitre.org/data/definitions/259.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Possible hardcoded password: '1234567890'",
      "line_number": 225,
      "line_range": [
        225,
        226,
        227,
        228,
        229
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b106_hardcoded_password_funcarg.html",
      "test_id": "B106",
      "test_name": "hardcoded_password_funcarg"
    },
    {
      "code": "263         }\n264         signed = self._pgp.sign(\n265             base64.b64encode(pickle.dumps(message)),\n266             keyid=self._kid,\n267             passphrase='1234567890',\n268         )\n269         response = _https_push(signed.data)  # pylint: disable=no-member\n",
      "col_offset": 17,
      "end_col_offset": 9,
      "filename": "Python/dawgie/pl/worker/aws.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 259,
        "link": "https://cwe.mitre.org/data/definitions/259.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Possible hardcoded password: '1234567890'",
      "line_number": 264,
      "line_range": [
        264,
        265,
        266,
        267,
        268
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b106_hardcoded_password_funcarg.html",
      "test_id": "B106",
      "test_name": "hardcoded_password_funcarg"
    },
    {
      "code": "349     api_key, url = dawgie.context.cloud_data.split('@')[0:2]\n350     response = requests.post(  # pylint: disable=missing-timeout\n351         url, json={'request': msg.decode()}, headers={'x-api-key': api_key}\n352     )\n353 \n",
      "col_offset": 15,
      "end_col_offset": 5,
      "filename": "Python/dawgie/pl/worker/aws.py",
      "issue_confidence": "LOW",
      "issue_cwe": {
        "id": 400,
        "link": "https://cwe.mitre.org/data/definitions/400.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Call to requests without timeout",
      "line_number": 350,
      "line_range": [
        350,
        351,
        352
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b113_request_without_timeout.html",
      "test_id": "B113",
      "test_name": "request_without_timeout"
    },
    {
      "code": "409             print('exchange() - verified')\n410             message = pickle.loads(\n411                 base64.b64decode(_pgp.decrypt(message).data[:-1])\n412             )\n413             mid = message['id']\n",
      "col_offset": 22,
      "end_col_offset": 13,
      "filename": "Python/dawgie/pl/worker/aws.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 502,
        "link": "https://cwe.mitre.org/data/definitions/502.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue.",
      "line_number": 410,
      "line_range": [
        410,
        411,
        412
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/blacklists/blacklist_calls.html#b301-pickle",
      "test_id": "B301",
      "test_name": "blacklist"
    },
    {
      "code": "434                     pk = _pgp.export_keys([keys['fingerprint']])\n435                     sk = _pgp.export_keys(\n436                         [keys['fingerprint']],\n437                         secret=True,\n438                         passphrase='1234567890',\n439                     )\n440                     # Sign.data dynamic so pylint: disable=no-member\n",
      "col_offset": 25,
      "end_col_offset": 21,
      "filename": "Python/dawgie/pl/worker/aws.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 259,
        "link": "https://cwe.mitre.org/data/definitions/259.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Possible hardcoded password: '1234567890'",
      "line_number": 435,
      "line_range": [
        435,
        436,
        437,
        438,
        439
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b106_hardcoded_password_funcarg.html",
      "test_id": "B106",
      "test_name": "hardcoded_password_funcarg"
    },
    {
      "code": "440                     # Sign.data dynamic so pylint: disable=no-member\n441                     signed = _pgp.sign(\n442                         pk, keyid=keys['fingerprint'], passphrase='1234567890'\n443                     ).data\n444                     # pylint: enable=no-member\n",
      "col_offset": 29,
      "end_col_offset": 21,
      "filename": "Python/dawgie/pl/worker/aws.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 259,
        "link": "https://cwe.mitre.org/data/definitions/259.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Possible hardcoded password: '1234567890'",
      "line_number": 441,
      "line_range": [
        441,
        442,
        443
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b106_hardcoded_password_funcarg.html",
      "test_id": "B106",
      "test_name": "hardcoded_password_funcarg"
    },
    {
      "code": "119             )\n120             self.__msg += '\\nunique id: ' + str(random.random())\n121             msg = struct.pack('>I', len(self.__msg)) + self.__msg.encode()\n",
      "col_offset": 48,
      "end_col_offset": 63,
      "filename": "Python/dawgie/security.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 330,
        "link": "https://cwe.mitre.org/data/definitions/330.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Standard pseudo-random generators are not suitable for security/cryptographic purposes.",
      "line_number": 120,
      "line_range": [
        120
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/blacklists/blacklist_calls.html#b311-random",
      "test_id": "B311",
      "test_name": "blacklist"
    },
    {
      "code": "215 def _send(s: socket.socket, message: str):\n216     signed = _PGP.sign(message, passphrase='1234567890', clearsign=True)\n217 \n",
      "col_offset": 13,
      "end_col_offset": 72,
      "filename": "Python/dawgie/security.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 259,
        "link": "https://cwe.mitre.org/data/definitions/259.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Possible hardcoded password: '1234567890'",
      "line_number": 216,
      "line_range": [
        216
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b106_hardcoded_password_funcarg.html",
      "test_id": "B106",
      "test_name": "hardcoded_password_funcarg"
    },
    {
      "code": "49 import os\n50 import pickle\n51 import sys\n",
      "col_offset": 0,
      "end_col_offset": 13,
      "filename": "Python/dawgie/tools/compliant.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 502,
        "link": "https://cwe.mitre.org/data/definitions/502.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with pickle module.",
      "line_number": 50,
      "line_range": [
        50
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/blacklists/blacklist_imports.html#b403-import-pickle",
      "test_id": "B403",
      "test_name": "blacklist"
    },
    {
      "code": "696             s = pickle.dumps(v)\n697             vp = pickle.loads(s)  # noqa: F841\n698             findings.append(True)\n",
      "col_offset": 17,
      "end_col_offset": 32,
      "filename": "Python/dawgie/tools/compliant.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 502,
        "link": "https://cwe.mitre.org/data/definitions/502.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue.",
      "line_number": 697,
      "line_range": [
        697
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/blacklists/blacklist_calls.html#b301-pickle",
      "test_id": "B301",
      "test_name": "blacklist"
    },
    {
      "code": "47 import os\n48 import shelve\n49 import shutil\n",
      "col_offset": 0,
      "end_col_offset": 13,
      "filename": "Python/dawgie/tools/detach.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 502,
        "link": "https://cwe.mitre.org/data/definitions/502.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with shelve module.",
      "line_number": 48,
      "line_range": [
        48
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/blacklists/blacklist_imports.html#b403-import-pickle",
      "test_id": "B403",
      "test_name": "blacklist"
    },
    {
      "code": "108 def _shelve(fn):\n109     return shelve.open(fn) if fn else fn\n110 \n",
      "col_offset": 11,
      "end_col_offset": 26,
      "filename": "Python/dawgie/tools/detach.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 502,
        "link": "https://cwe.mitre.org/data/definitions/502.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue.",
      "line_number": 109,
      "line_range": [
        109
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/blacklists/blacklist_calls.html#b301-pickle",
      "test_id": "B301",
      "test_name": "blacklist"
    },
    {
      "code": "49 import smtplib\n50 import subprocess\n51 \n",
      "col_offset": 0,
      "end_col_offset": 17,
      "filename": "Python/dawgie/tools/submit.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 78,
        "link": "https://cwe.mitre.org/data/definitions/78.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with the subprocess module.",
      "line_number": 50,
      "line_range": [
        50
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "147 def _spawn(cmd: [str]):\n148     return subprocess.call(cmd) == 0\n149 \n",
      "col_offset": 11,
      "end_col_offset": 31,
      "filename": "Python/dawgie/tools/submit.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 78,
        "link": "https://cwe.mitre.org/data/definitions/78.html"
      },
      "issue_severity": "LOW",
      "issue_text": "subprocess call - check for execution of untrusted input.",
      "line_number": 148,
      "line_range": [
        148
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/plugins/b603_subprocess_without_shell_equals_true.html",
      "test_id": "B603",
      "test_name": "subprocess_without_shell_equals_true"
    },
    {
      "code": "54     except:  # noqa: E722\n55         ll = eval(level)\n56     return ll\n",
      "col_offset": 13,
      "end_col_offset": 24,
      "filename": "Python/dawgie/util/args.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 78,
        "link": "https://cwe.mitre.org/data/definitions/78.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Use of possibly insecure function - consider using safer ast.literal_eval.",
      "line_number": 55,
      "line_range": [
        55
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.8.6/blacklists/blacklist_calls.html#b307-eval",
      "test_id": "B307",
      "test_name": "blacklist"
    }
  ]
}